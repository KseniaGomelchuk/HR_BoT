import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove

# üîë –¢–æ–∫–µ–Ω –æ—Ç BotFather
API_TOKEN = '8254692806:AAFMTqWDelkdKkDWDA2ArGbiV7vKxGQX1x8'
ADMIN_ID = 6356300440  # –¢–≤–æ–π Telegram ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    fio = State()
    react = State()
    status = State()
    reason = State()
    location = State()
    salary = State()
    cypress = State()
    structure = State()
    flaky = State()
    mocks = State()
    test1 = State()
    test2 = State()
    test3 = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
storage = MemoryStorage()

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –§–ò–û –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ:")
    await state.set_state(Form.fio)

@dp.message(Form.fio)
async def process_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 1. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –≤–∞—à –æ–ø—ã—Ç —Å React, MobX, TypeScript:")
    await state.set_state(Form.react)

@dp.message(Form.react)
async def process_react(message: Message, state: FSMContext):
    await state.update_data(react=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 2. –°–µ–π—á–∞—Å –≤—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω—ã? –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å?")
    await state.set_state(Form.status)

@dp.message(Form.status)
async def process_status(message: Message, state: FSMContext):
    await state.update_data(status=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 3. –ü–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É?")
    await state.set_state(Form.reason)

@dp.message(Form.reason)
async def process_reason(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 4. –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —É–¥–∞–ª—ë–Ω–∫—É –∏–ª–∏ –æ—Ñ–∏—Å?")
    await state.set_state(Form.location)

@dp.message(Form.location)
async def process_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 5. –í–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ (–≤ ‚ÇΩ)?")
    await state.set_state(Form.salary)

@dp.message(Form.salary)
async def process_salary(message: Message, state: FSMContext):
    try:
        salary = int(''.join(filter(str.isdigit, message.text)))
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É —á–∏—Å–ª–æ–º")
        return

    data = await state.get_data()
    await state.update_data(salary=salary)

    if salary > 300000:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∫–ª–∏–∫ –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞–∫–∞–Ω—Å–∏–∏. –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –±—é–¥–∂–µ—Ç –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 300 000 ‚ÇΩ, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å. –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ä–æ–ª—å, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏. –ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—Ö–æ–≤!")
        await state.clear()
        return

    if '–Ω–µ' in data['location'].lower() and '—Ä–æ—Å' not in data['location'].lower():
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞–∫–∞–Ω—Å–∏–∏. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –†–§. –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç—Å—è, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–Ω–∏—é. –£–¥–∞—á–∏!")
        await state.clear()
        return

    await message.answer("–í–æ–ø—Ä–æ—Å 6. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –æ–ø—ã—Ç —Å Cypress –∏ e2e-—Ç–µ—Å—Ç–∞–º–∏")
    await state.set_state(Form.cypress)

@dp.message(Form.cypress)
async def process_cypress(message: Message, state: FSMContext):
    await state.update_data(cypress=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 7. –ö–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç–µ —Ç–µ—Å—Ç—ã? Best practices?")
    await state.set_state(Form.structure)

@dp.message(Form.structure)
async def process_structure(message: Message, state: FSMContext):
    await state.update_data(structure=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 8. –ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç–µ flaky-—Ç–µ—Å—Ç—ã?")
    await state.set_state(Form.flaky)

@dp.message(Form.flaky)
async def process_flaky(message: Message, state: FSMContext):
    await state.update_data(flaky=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 9. –û–ø—ã—Ç —Å mock, stub, intercept –∏ CI/CD?")
    await state.set_state(Form.mocks)

@dp.message(Form.mocks)
async def process_mocks(message: Message, state: FSMContext):
    await state.update_data(mocks=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å 3 –∑–∞–¥–∞—á–∫–∏. –ü–µ—Ä–≤–∞—è:\n–ß–µ—Ä–µ–ø–∞—à–∫–∞ –ª–µ–∑–µ—Ç –Ω–∞ —Ö–æ–ª–º 100–º, –¥–Ω—ë–º +50, –Ω–æ—á—å—é -30. –ù–∞ –∫–∞–∫–∏–µ —Å—É—Ç–∫–∏ –∑–∞–±–µ—Ä—ë—Ç—Å—è?")
    await state.set_state(Form.test1)

@dp.message(Form.test1)
async def process_test1(message: Message, state: FSMContext):
    await state.update_data(test1=message.text)
    await message.answer("–ó–∞–¥–∞—á–∞ 2: –ü–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–π –º–µ–∂–¥—É 10 –ª—é–¥—å–º–∏")
    await state.set_state(Form.test2)

@dp.message(Form.test2)
async def process_test2(message: Message, state: FSMContext):
    await state.update_data(test2=message.text)
    await message.answer("–ó–∞–¥–∞—á–∞ 3: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, —É–¥–∞–ª—è—é—â—É—é –¥—É–±–ª–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å–ª–æ–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
    await state.set_state(Form.test3)

@dp.message(Form.test3)
async def process_test3(message: Message, state: FSMContext):
    await state.update_data(test3=message.text)
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–µ–ª
    passed = False
    if '4' in data['test1'] and '45' in data['test2']:
        passed = True

    summary = f"\n–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç:\n\n–§–ò–û –∏ —Ä–µ–∑—é–º–µ: {data.get('fio')}\n\n"
    summary += f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {data.get('salary')}\n–õ–æ–∫–∞—Ü–∏—è: {data.get('location')}\n\n"
    summary += f"–û—Ç–≤–µ—Ç—ã:\n1: {data.get('react')}\n2: {data.get('status')}\n3: {data.get('reason')}\n"
    summary += f"4: {data.get('location')}\n5: {data.get('salary')}\n6: {data.get('cypress')}\n"
    summary += f"7: {data.get('structure')}\n8: {data.get('flaky')}\n9: {data.get('mocks')}\n"
    summary += f"\n–¢–µ—Å—Ç—ã:\n1: {data.get('test1')}\n2: {data.get('test2')}\n3: {data.get('test3')}\n"

    if passed:
        summary += "\n‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç!"
        await bot.send_message(ADMIN_ID, summary)
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã! –Ø –ø–µ—Ä–µ–¥–∞—é –≤–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ñ–∏–¥–±–µ–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2‚Äì3 (–∏–Ω–æ–≥–¥–∞ —á—É—Ç—å –¥–æ–ª—å—à–µ) —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.")
    else:
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞–∫–∞–Ω—Å–∏–∏. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º. –£–¥–∞—á–∏ –≤–∞–º –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø—É—Ç–∏!")

    with open("results.txt", "a", encoding="utf-8") as f:
        f.write(summary + "\n" + "="*40 + "\n")

    await state.clear()

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
